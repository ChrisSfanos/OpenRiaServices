'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Compare Binary
Option Infer On
Option Strict On
Option Explicit On

Imports CodeFirstModels
Imports OpenRiaServices
Imports OpenRiaServices.Client
Imports OpenRiaServices.Client.Authentication
Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.ServiceModel
Imports System.Threading.Tasks

Namespace EFCoreModels.Northwind

    ''' <summary>
    ''' The 'Category' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class Category
        Inherits Entity

        Private _categoryID As Integer

        Private _categoryName As String

        Private _description As String

        Private _picture() As Byte

        Private _products As EntityCollection(Of Product)

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnCategoryNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCategoryNameChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
        Partial Private Sub OnPictureChanging(ByVal value() As Byte)
        End Sub
        Partial Private Sub OnPictureChanged()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Category"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the 'CategoryID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key(),
         RoundtripOriginal()>
        Public Property CategoryID() As Integer
            Get
                Return Me._categoryID
            End Get
            Set
                If ((Me._categoryID = Value) _
                            = False) Then
                    Me.OnCategoryIDChanging(Value)
                    Me.ValidateProperty("CategoryID", Value)
                    Me._categoryID = Value
                    Me.RaisePropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'CategoryName' value.
        ''' </summary>
        <DataMember(),
         Required(),
         StringLength(15)>
        Public Property CategoryName() As String
            Get
                Return Me._categoryName
            End Get
            Set
                If (String.Equals(Me._categoryName, Value) = False) Then
                    Me.OnCategoryNameChanging(Value)
                    Me.RaiseDataMemberChanging("CategoryName")
                    Me.ValidateProperty("CategoryName", Value)
                    Me._categoryName = Value
                    Me.RaiseDataMemberChanged("CategoryName")
                    Me.OnCategoryNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Description' value.
        ''' </summary>
        <DataMember()>
        Public Property Description() As String
            Get
                Return Me._description
            End Get
            Set
                If (String.Equals(Me._description, Value) = False) Then
                    Me.OnDescriptionChanging(Value)
                    Me.RaiseDataMemberChanging("Description")
                    Me.ValidateProperty("Description", Value)
                    Me._description = Value
                    Me.RaiseDataMemberChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Picture' value.
        ''' </summary>
        <DataMember()>
        Public Property Picture() As Byte()
            Get
                Return Me._picture
            End Get
            Set
                If (Object.Equals(Me._picture, Value) = False) Then
                    Me.OnPictureChanging(Value)
                    Me.RaiseDataMemberChanging("Picture")
                    Me.ValidateProperty("Picture", Value)
                    Me._picture = Value
                    Me.RaiseDataMemberChanged("Picture")
                    Me.OnPictureChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets the collection of associated <see cref="Product"/> entity instances.
        ''' </summary>
        <Association("Category_Product", "CategoryID", "CategoryID")>
        Public ReadOnly Property Products() As EntityCollection(Of Product)
            Get
                If (Me._products Is Nothing) Then
                    Me._products = New EntityCollection(Of Product)(Me, "Products", AddressOf Me.FilterProducts, AddressOf Me.AttachProducts, AddressOf Me.DetachProducts)
                End If
                Return Me._products
            End Get
        End Property

        Private Sub AttachProducts(ByVal entity As Product)
            entity.Category = Me
        End Sub

        Private Sub DetachProducts(ByVal entity As Product)
            entity.Category = Nothing
        End Sub

        Private Function FilterProducts(ByVal entity As Product) As Boolean
            Return Object.Equals(entity.CategoryID, Me.CategoryID)
        End Function

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._categoryID
        End Function
    End Class

    ''' <summary>
    ''' The 'Customer' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class Customer
        Inherits Entity

        Private _address As String

        Private _city As String

        Private _companyName As String

        Private _contactName As String

        Private _contactTitle As String

        Private _country As String

        Private _customerID As String

        Private _fax As String

        Private _orders As EntityCollection(Of Order)

        Private _phone As String

        Private _postalCode As String

        Private _region As String

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnContactNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactNameChanged()
        End Sub
        Partial Private Sub OnContactTitleChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnContactTitleChanged()
        End Sub
        Partial Private Sub OnCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerIDChanged()
        End Sub
        Partial Private Sub OnFaxChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Customer"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the 'Address' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(60)>
        Public Property Address() As String
            Get
                Return Me._address
            End Get
            Set
                If (String.Equals(Me._address, Value) = False) Then
                    Me.OnAddressChanging(Value)
                    Me.RaiseDataMemberChanging("Address")
                    Me.ValidateProperty("Address", Value)
                    Me._address = Value
                    Me.RaiseDataMemberChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'City' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(15)>
        Public Property City() As String
            Get
                Return Me._city
            End Get
            Set
                If (String.Equals(Me._city, Value) = False) Then
                    Me.OnCityChanging(Value)
                    Me.RaiseDataMemberChanging("City")
                    Me.ValidateProperty("City", Value)
                    Me._city = Value
                    Me.RaiseDataMemberChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'CompanyName' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(40)>
        Public Property CompanyName() As String
            Get
                Return Me._companyName
            End Get
            Set
                If (String.Equals(Me._companyName, Value) = False) Then
                    Me.OnCompanyNameChanging(Value)
                    Me.RaiseDataMemberChanging("CompanyName")
                    Me.ValidateProperty("CompanyName", Value)
                    Me._companyName = Value
                    Me.RaiseDataMemberChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ContactName' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(30)>
        Public Property ContactName() As String
            Get
                Return Me._contactName
            End Get
            Set
                If (String.Equals(Me._contactName, Value) = False) Then
                    Me.OnContactNameChanging(Value)
                    Me.RaiseDataMemberChanging("ContactName")
                    Me.ValidateProperty("ContactName", Value)
                    Me._contactName = Value
                    Me.RaiseDataMemberChanged("ContactName")
                    Me.OnContactNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ContactTitle' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(30)>
        Public Property ContactTitle() As String
            Get
                Return Me._contactTitle
            End Get
            Set
                If (String.Equals(Me._contactTitle, Value) = False) Then
                    Me.OnContactTitleChanging(Value)
                    Me.RaiseDataMemberChanging("ContactTitle")
                    Me.ValidateProperty("ContactTitle", Value)
                    Me._contactTitle = Value
                    Me.RaiseDataMemberChanged("ContactTitle")
                    Me.OnContactTitleChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Country' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(15)>
        Public Property Country() As String
            Get
                Return Me._country
            End Get
            Set
                If (String.Equals(Me._country, Value) = False) Then
                    Me.OnCountryChanging(Value)
                    Me.RaiseDataMemberChanging("Country")
                    Me.ValidateProperty("Country", Value)
                    Me._country = Value
                    Me.RaiseDataMemberChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'CustomerID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key(),
         Required(),
         RoundtripOriginal(),
         StringLength(15)>
        Public Property CustomerID() As String
            Get
                Return Me._customerID
            End Get
            Set
                If (String.Equals(Me._customerID, Value) = False) Then
                    Me.OnCustomerIDChanging(Value)
                    Me.ValidateProperty("CustomerID", Value)
                    Me._customerID = Value
                    Me.RaisePropertyChanged("CustomerID")
                    Me.OnCustomerIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Fax' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(24)>
        Public Property Fax() As String
            Get
                Return Me._fax
            End Get
            Set
                If (String.Equals(Me._fax, Value) = False) Then
                    Me.OnFaxChanging(Value)
                    Me.RaiseDataMemberChanging("Fax")
                    Me.ValidateProperty("Fax", Value)
                    Me._fax = Value
                    Me.RaiseDataMemberChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets the collection of associated <see cref="Order"/> entity instances.
        ''' </summary>
        <Association("Customer_Order", "CustomerID", "CustomerID")>
        Public ReadOnly Property Orders() As EntityCollection(Of Order)
            Get
                If (Me._orders Is Nothing) Then
                    Me._orders = New EntityCollection(Of Order)(Me, "Orders", AddressOf Me.FilterOrders, AddressOf Me.AttachOrders, AddressOf Me.DetachOrders)
                End If
                Return Me._orders
            End Get
        End Property

        ''' <summary>
        ''' Gets or sets the 'Phone' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(24)>
        Public Property Phone() As String
            Get
                Return Me._phone
            End Get
            Set
                If (String.Equals(Me._phone, Value) = False) Then
                    Me.OnPhoneChanging(Value)
                    Me.RaiseDataMemberChanging("Phone")
                    Me.ValidateProperty("Phone", Value)
                    Me._phone = Value
                    Me.RaiseDataMemberChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'PostalCode' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(10)>
        Public Property PostalCode() As String
            Get
                Return Me._postalCode
            End Get
            Set
                If (String.Equals(Me._postalCode, Value) = False) Then
                    Me.OnPostalCodeChanging(Value)
                    Me.RaiseDataMemberChanging("PostalCode")
                    Me.ValidateProperty("PostalCode", Value)
                    Me._postalCode = Value
                    Me.RaiseDataMemberChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Region' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(15)>
        Public Property Region() As String
            Get
                Return Me._region
            End Get
            Set
                If (String.Equals(Me._region, Value) = False) Then
                    Me.OnRegionChanging(Value)
                    Me.RaiseDataMemberChanging("Region")
                    Me.ValidateProperty("Region", Value)
                    Me._region = Value
                    Me.RaiseDataMemberChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        Private Sub AttachOrders(ByVal entity As Order)
            entity.Customer = Me
        End Sub

        Private Sub DetachOrders(ByVal entity As Order)
            entity.Customer = Nothing
        End Sub

        Private Function FilterOrders(ByVal entity As Order) As Boolean
            Return Object.Equals(entity.CustomerID, Me.CustomerID)
        End Function

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._customerID
        End Function
    End Class

    ''' <summary>
    ''' The 'Order' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class Order
        Inherits Entity

        Private _customer As EntityRef(Of Customer)

        Private _customerID As String

        Private _employeeID As Nullable(Of Integer)

        Private _formattedName As String

        Private _freight As Nullable(Of Decimal)

        Private _order_Details As EntityCollection(Of Order_Detail)

        Private _orderDate As Nullable(Of DateTime)

        Private _orderID As Integer

        Private _requiredDate As Nullable(Of DateTime)

        Private _shipAddress As String

        Private _shipCity As String

        Private _shipCountry As String

        Private _shipName As String

        Private _shippedDate As Nullable(Of DateTime)

        Private _shipPostalCode As String

        Private _shipRegion As String

        Private _shipVia As Nullable(Of Integer)

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCustomerIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCustomerIDChanged()
        End Sub
        Partial Private Sub OnEmployeeIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Partial Private Sub OnEmployeeIDChanged()
        End Sub
        Partial Private Sub OnFormattedNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnFormattedNameChanged()
        End Sub
        Partial Private Sub OnFreightChanging(ByVal value As Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnFreightChanged()
        End Sub
        Partial Private Sub OnOrderDateChanging(ByVal value As Nullable(Of DateTime))
        End Sub
        Partial Private Sub OnOrderDateChanged()
        End Sub
        Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnRequiredDateChanging(ByVal value As Nullable(Of DateTime))
        End Sub
        Partial Private Sub OnRequiredDateChanged()
        End Sub
        Partial Private Sub OnShipAddressChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipAddressChanged()
        End Sub
        Partial Private Sub OnShipCityChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipCityChanged()
        End Sub
        Partial Private Sub OnShipCountryChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipCountryChanged()
        End Sub
        Partial Private Sub OnShipNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipNameChanged()
        End Sub
        Partial Private Sub OnShippedDateChanging(ByVal value As Nullable(Of DateTime))
        End Sub
        Partial Private Sub OnShippedDateChanged()
        End Sub
        Partial Private Sub OnShipPostalCodeChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipPostalCodeChanged()
        End Sub
        Partial Private Sub OnShipRegionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnShipRegionChanged()
        End Sub
        Partial Private Sub OnShipViaChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Partial Private Sub OnShipViaChanged()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Order"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the associated <see cref="Customer"/> entity.
        ''' </summary>
        <Association("Customer_Order", "CustomerID", "CustomerID", IsForeignKey:=True)>
        Public Property Customer() As Customer
            Get
                If (Me._customer Is Nothing) Then
                    Me._customer = New EntityRef(Of Customer)(Me, "Customer", AddressOf Me.FilterCustomer)
                End If
                Return Me._customer.Entity
            End Get
            Set
                Dim previous As Customer = Me.Customer
                If (Object.Equals(previous, Value) = False) Then
                    Me.ValidateProperty("Customer", Value)
                    If (Not (previous) Is Nothing) Then
                        Me._customer.Entity = Nothing
                        previous.Orders.Remove(Me)
                    End If
                    If (Not (Value) Is Nothing) Then
                        Me.CustomerID = Value.CustomerID
                    Else
                        Me.CustomerID = CType(Nothing, String)
                    End If
                    Me._customer.Entity = Value
                    If (Not (Value) Is Nothing) Then
                        Value.Orders.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Customer")
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'CustomerID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(5)>
        Public Property CustomerID() As String
            Get
                Return Me._customerID
            End Get
            Set
                If (String.Equals(Me._customerID, Value) = False) Then
                    Me.OnCustomerIDChanging(Value)
                    Me.RaiseDataMemberChanging("CustomerID")
                    Me.ValidateProperty("CustomerID", Value)
                    Me._customerID = Value
                    Me.RaiseDataMemberChanged("CustomerID")
                    Me.OnCustomerIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'EmployeeID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property EmployeeID() As Nullable(Of Integer)
            Get
                Return Me._employeeID
            End Get
            Set
                If (Me._employeeID.Equals(Value) = False) Then
                    Me.OnEmployeeIDChanging(Value)
                    Me.RaiseDataMemberChanging("EmployeeID")
                    Me.ValidateProperty("EmployeeID", Value)
                    Me._employeeID = Value
                    Me.RaiseDataMemberChanged("EmployeeID")
                    Me.OnEmployeeIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'FormattedName' value.
        ''' </summary>
        <DataMember(),
         Editable(False),
         [ReadOnly](True)>
        Public Property FormattedName() As String
            Get
                Return Me._formattedName
            End Get
            Set
                If (String.Equals(Me._formattedName, Value) = False) Then
                    Me.OnFormattedNameChanging(Value)
                    Me.ValidateProperty("FormattedName", Value)
                    Me._formattedName = Value
                    Me.RaisePropertyChanged("FormattedName")
                    Me.OnFormattedNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Freight' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property Freight() As Nullable(Of Decimal)
            Get
                Return Me._freight
            End Get
            Set
                If (Me._freight.Equals(Value) = False) Then
                    Me.OnFreightChanging(Value)
                    Me.RaiseDataMemberChanging("Freight")
                    Me.ValidateProperty("Freight", Value)
                    Me._freight = Value
                    Me.RaiseDataMemberChanged("Freight")
                    Me.OnFreightChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets the collection of associated <see cref="Order_Detail"/> entity instances.
        ''' </summary>
        <Association("Order_Order_Detail", "OrderID", "OrderID")>
        Public ReadOnly Property Order_Details() As EntityCollection(Of Order_Detail)
            Get
                If (Me._order_Details Is Nothing) Then
                    Me._order_Details = New EntityCollection(Of Order_Detail)(Me, "Order_Details", AddressOf Me.FilterOrder_Details, AddressOf Me.AttachOrder_Details, AddressOf Me.DetachOrder_Details)
                End If
                Return Me._order_Details
            End Get
        End Property

        ''' <summary>
        ''' Gets or sets the 'OrderDate' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property OrderDate() As Nullable(Of DateTime)
            Get
                Return Me._orderDate
            End Get
            Set
                If (Me._orderDate.Equals(Value) = False) Then
                    Me.OnOrderDateChanging(Value)
                    Me.RaiseDataMemberChanging("OrderDate")
                    Me.ValidateProperty("OrderDate", Value)
                    Me._orderDate = Value
                    Me.RaiseDataMemberChanged("OrderDate")
                    Me.OnOrderDateChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'OrderID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key(),
         RoundtripOriginal()>
        Public Property OrderID() As Integer
            Get
                Return Me._orderID
            End Get
            Set
                If ((Me._orderID = Value) _
                            = False) Then
                    Me.OnOrderIDChanging(Value)
                    Me.ValidateProperty("OrderID", Value)
                    Me._orderID = Value
                    Me.RaisePropertyChanged("OrderID")
                    Me.OnOrderIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'RequiredDate' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property RequiredDate() As Nullable(Of DateTime)
            Get
                Return Me._requiredDate
            End Get
            Set
                If (Me._requiredDate.Equals(Value) = False) Then
                    Me.OnRequiredDateChanging(Value)
                    Me.RaiseDataMemberChanging("RequiredDate")
                    Me.ValidateProperty("RequiredDate", Value)
                    Me._requiredDate = Value
                    Me.RaiseDataMemberChanged("RequiredDate")
                    Me.OnRequiredDateChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShipAddress' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(60)>
        Public Property ShipAddress() As String
            Get
                Return Me._shipAddress
            End Get
            Set
                If (String.Equals(Me._shipAddress, Value) = False) Then
                    Me.OnShipAddressChanging(Value)
                    Me.RaiseDataMemberChanging("ShipAddress")
                    Me.ValidateProperty("ShipAddress", Value)
                    Me._shipAddress = Value
                    Me.RaiseDataMemberChanged("ShipAddress")
                    Me.OnShipAddressChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShipCity' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(15)>
        Public Property ShipCity() As String
            Get
                Return Me._shipCity
            End Get
            Set
                If (String.Equals(Me._shipCity, Value) = False) Then
                    Me.OnShipCityChanging(Value)
                    Me.RaiseDataMemberChanging("ShipCity")
                    Me.ValidateProperty("ShipCity", Value)
                    Me._shipCity = Value
                    Me.RaiseDataMemberChanged("ShipCity")
                    Me.OnShipCityChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShipCountry' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(15)>
        Public Property ShipCountry() As String
            Get
                Return Me._shipCountry
            End Get
            Set
                If (String.Equals(Me._shipCountry, Value) = False) Then
                    Me.OnShipCountryChanging(Value)
                    Me.RaiseDataMemberChanging("ShipCountry")
                    Me.ValidateProperty("ShipCountry", Value)
                    Me._shipCountry = Value
                    Me.RaiseDataMemberChanged("ShipCountry")
                    Me.OnShipCountryChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShipName' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(40)>
        Public Property ShipName() As String
            Get
                Return Me._shipName
            End Get
            Set
                If (String.Equals(Me._shipName, Value) = False) Then
                    Me.OnShipNameChanging(Value)
                    Me.RaiseDataMemberChanging("ShipName")
                    Me.ValidateProperty("ShipName", Value)
                    Me._shipName = Value
                    Me.RaiseDataMemberChanged("ShipName")
                    Me.OnShipNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShippedDate' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property ShippedDate() As Nullable(Of DateTime)
            Get
                Return Me._shippedDate
            End Get
            Set
                If (Me._shippedDate.Equals(Value) = False) Then
                    Me.OnShippedDateChanging(Value)
                    Me.RaiseDataMemberChanging("ShippedDate")
                    Me.ValidateProperty("ShippedDate", Value)
                    Me._shippedDate = Value
                    Me.RaiseDataMemberChanged("ShippedDate")
                    Me.OnShippedDateChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShipPostalCode' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(10)>
        Public Property ShipPostalCode() As String
            Get
                Return Me._shipPostalCode
            End Get
            Set
                If (String.Equals(Me._shipPostalCode, Value) = False) Then
                    Me.OnShipPostalCodeChanging(Value)
                    Me.RaiseDataMemberChanging("ShipPostalCode")
                    Me.ValidateProperty("ShipPostalCode", Value)
                    Me._shipPostalCode = Value
                    Me.RaiseDataMemberChanged("ShipPostalCode")
                    Me.OnShipPostalCodeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShipRegion' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(15)>
        Public Property ShipRegion() As String
            Get
                Return Me._shipRegion
            End Get
            Set
                If (String.Equals(Me._shipRegion, Value) = False) Then
                    Me.OnShipRegionChanging(Value)
                    Me.RaiseDataMemberChanging("ShipRegion")
                    Me.ValidateProperty("ShipRegion", Value)
                    Me._shipRegion = Value
                    Me.RaiseDataMemberChanged("ShipRegion")
                    Me.OnShipRegionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ShipVia' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property ShipVia() As Nullable(Of Integer)
            Get
                Return Me._shipVia
            End Get
            Set
                If (Me._shipVia.Equals(Value) = False) Then
                    Me.OnShipViaChanging(Value)
                    Me.RaiseDataMemberChanging("ShipVia")
                    Me.ValidateProperty("ShipVia", Value)
                    Me._shipVia = Value
                    Me.RaiseDataMemberChanged("ShipVia")
                    Me.OnShipViaChanged()
                End If
            End Set
        End Property

        Private Function FilterCustomer(ByVal entity As Customer) As Boolean
            Return Object.Equals(entity.CustomerID, Me.CustomerID)
        End Function

        Private Sub AttachOrder_Details(ByVal entity As Order_Detail)
            entity.Order = Me
        End Sub

        Private Sub DetachOrder_Details(ByVal entity As Order_Detail)
            entity.Order = Nothing
        End Sub

        Private Function FilterOrder_Details(ByVal entity As Order_Detail) As Boolean
            Return Object.Equals(entity.OrderID, Me.OrderID)
        End Function

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._orderID
        End Function
    End Class

    ''' <summary>
    ''' The 'Order_Detail' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class Order_Detail
        Inherits Entity

        Private _discount As Single

        Private _order As EntityRef(Of Order)

        Private _orderID As Integer

        Private _product As EntityRef(Of Product)

        Private _productID As Integer

        Private _quantity As Short

        Private _unitPrice As Decimal

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnDiscountChanging(ByVal value As Single)
        End Sub
        Partial Private Sub OnDiscountChanged()
        End Sub
        Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnQuantityChanging(ByVal value As Short)
        End Sub
        Partial Private Sub OnQuantityChanged()
        End Sub
        Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
        End Sub
        Partial Private Sub OnUnitPriceChanged()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Order_Detail"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the 'Discount' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property Discount() As Single
            Get
                Return Me._discount
            End Get
            Set
                If ((Me._discount = Value) _
                            = False) Then
                    Me.OnDiscountChanging(Value)
                    Me.RaiseDataMemberChanging("Discount")
                    Me.ValidateProperty("Discount", Value)
                    Me._discount = Value
                    Me.RaiseDataMemberChanged("Discount")
                    Me.OnDiscountChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the associated <see cref="Order"/> entity.
        ''' </summary>
        <Association("Order_Order_Detail", "OrderID", "OrderID", IsForeignKey:=True)>
        Public Property Order() As Order
            Get
                If (Me._order Is Nothing) Then
                    Me._order = New EntityRef(Of Order)(Me, "Order", AddressOf Me.FilterOrder)
                End If
                Return Me._order.Entity
            End Get
            Set
                Dim previous As Order = Me.Order
                If (Object.Equals(previous, Value) = False) Then
                    Me.ValidateProperty("Order", Value)
                    If (Not (previous) Is Nothing) Then
                        Me._order.Entity = Nothing
                        previous.Order_Details.Remove(Me)
                    End If
                    If (Not (Value) Is Nothing) Then
                        Me.OrderID = Value.OrderID
                    Else
                        Me.OrderID = CType(Nothing, Integer)
                    End If
                    Me._order.Entity = Value
                    If (Not (Value) Is Nothing) Then
                        Value.Order_Details.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Order")
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'OrderID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         Key(),
         RoundtripOriginal()>
        Public Property OrderID() As Integer
            Get
                Return Me._orderID
            End Get
            Set
                If ((Me._orderID = Value) _
                            = False) Then
                    Me.OnOrderIDChanging(Value)
                    Me.RaiseDataMemberChanging("OrderID")
                    Me.ValidateProperty("OrderID", Value)
                    Me._orderID = Value
                    Me.RaiseDataMemberChanged("OrderID")
                    Me.OnOrderIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the associated <see cref="Product"/> entity.
        ''' </summary>
        <Association("Product_Order_Detail", "ProductID", "ProductID", IsForeignKey:=True)>
        Public Property Product() As Product
            Get
                If (Me._product Is Nothing) Then
                    Me._product = New EntityRef(Of Product)(Me, "Product", AddressOf Me.FilterProduct)
                End If
                Return Me._product.Entity
            End Get
            Set
                Dim previous As Product = Me.Product
                If (Object.Equals(previous, Value) = False) Then
                    Me.ValidateProperty("Product", Value)
                    If (Not (previous) Is Nothing) Then
                        Me._product.Entity = Nothing
                        previous.Order_Details.Remove(Me)
                    End If
                    If (Not (Value) Is Nothing) Then
                        Me.ProductID = Value.ProductID
                    Else
                        Me.ProductID = CType(Nothing, Integer)
                    End If
                    Me._product.Entity = Value
                    If (Not (Value) Is Nothing) Then
                        Value.Order_Details.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Product")
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ProductID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         Key(),
         RoundtripOriginal()>
        Public Property ProductID() As Integer
            Get
                Return Me._productID
            End Get
            Set
                If ((Me._productID = Value) _
                            = False) Then
                    Me.OnProductIDChanging(Value)
                    Me.RaiseDataMemberChanging("ProductID")
                    Me.ValidateProperty("ProductID", Value)
                    Me._productID = Value
                    Me.RaiseDataMemberChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Quantity' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property Quantity() As Short
            Get
                Return Me._quantity
            End Get
            Set
                If ((Me._quantity = Value) _
                            = False) Then
                    Me.OnQuantityChanging(Value)
                    Me.RaiseDataMemberChanging("Quantity")
                    Me.ValidateProperty("Quantity", Value)
                    Me._quantity = Value
                    Me.RaiseDataMemberChanged("Quantity")
                    Me.OnQuantityChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'UnitPrice' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property UnitPrice() As Decimal
            Get
                Return Me._unitPrice
            End Get
            Set
                If ((Me._unitPrice = Value) _
                            = False) Then
                    Me.OnUnitPriceChanging(Value)
                    Me.RaiseDataMemberChanging("UnitPrice")
                    Me.ValidateProperty("UnitPrice", Value)
                    Me._unitPrice = Value
                    Me.RaiseDataMemberChanged("UnitPrice")
                    Me.OnUnitPriceChanged()
                End If
            End Set
        End Property

        Private Function FilterOrder(ByVal entity As Order) As Boolean
            Return Object.Equals(entity.OrderID, Me.OrderID)
        End Function

        Private Function FilterProduct(ByVal entity As Product) As Boolean
            Return Object.Equals(entity.ProductID, Me.ProductID)
        End Function

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return EntityKey.Create(Me._orderID, Me._productID)
        End Function
    End Class

    ''' <summary>
    ''' The 'Product' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class Product
        Inherits Entity

        Private _category As EntityRef(Of Category)

        Private _categoryID As Nullable(Of Integer)

        Private _categoryName As String

        Private _discontinued As Boolean

        Private _order_Details As EntityCollection(Of Order_Detail)

        Private _productID As Integer

        Private _productName As String

        Private _quantityPerUnit As String

        Private _reorderLevel As Nullable(Of Short)

        Private _resolveMethod As String

        Private _supplierID As Nullable(Of Integer)

        Private _supplierName As String

        Private _unitPrice As Nullable(Of Decimal)

        Private _unitsInStock As Nullable(Of Short)

        Private _unitsOnOrder As Nullable(Of Short)

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCategoryIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnCategoryNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCategoryNameChanged()
        End Sub
        Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
        End Sub
        Partial Private Sub OnDiscontinuedChanged()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
        Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnQuantityPerUnitChanged()
        End Sub
        Partial Private Sub OnReorderLevelChanging(ByVal value As Nullable(Of Short))
        End Sub
        Partial Private Sub OnReorderLevelChanged()
        End Sub
        Partial Private Sub OnResolveMethodChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnResolveMethodChanged()
        End Sub
        Partial Private Sub OnSupplierIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Partial Private Sub OnSupplierIDChanged()
        End Sub
        Partial Private Sub OnSupplierNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnSupplierNameChanged()
        End Sub
        Partial Private Sub OnUnitPriceChanging(ByVal value As Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnUnitPriceChanged()
        End Sub
        Partial Private Sub OnUnitsInStockChanging(ByVal value As Nullable(Of Short))
        End Sub
        Partial Private Sub OnUnitsInStockChanged()
        End Sub
        Partial Private Sub OnUnitsOnOrderChanging(ByVal value As Nullable(Of Short))
        End Sub
        Partial Private Sub OnUnitsOnOrderChanged()
        End Sub
        Partial Private Sub OnDiscontinueProductInvoking()
        End Sub
        Partial Private Sub OnDiscontinueProductInvoked()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Product"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the associated <see cref="Category"/> entity.
        ''' </summary>
        <Association("Category_Product", "CategoryID", "CategoryID", IsForeignKey:=True)>
        Public Property Category() As Category
            Get
                If (Me._category Is Nothing) Then
                    Me._category = New EntityRef(Of Category)(Me, "Category", AddressOf Me.FilterCategory)
                End If
                Return Me._category.Entity
            End Get
            Set
                Dim previous As Category = Me.Category
                If (Object.Equals(previous, Value) = False) Then
                    Me.ValidateProperty("Category", Value)
                    If (Not (previous) Is Nothing) Then
                        Me._category.Entity = Nothing
                        previous.Products.Remove(Me)
                    End If
                    If (Not (Value) Is Nothing) Then
                        Me.CategoryID = Value.CategoryID
                    Else
                        Me.CategoryID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me._category.Entity = Value
                    If (Not (Value) Is Nothing) Then
                        Value.Products.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Category")
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'CategoryID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property CategoryID() As Nullable(Of Integer)
            Get
                Return Me._categoryID
            End Get
            Set
                If (Me._categoryID.Equals(Value) = False) Then
                    Me.OnCategoryIDChanging(Value)
                    Me.RaiseDataMemberChanging("CategoryID")
                    Me.ValidateProperty("CategoryID", Value)
                    Me._categoryID = Value
                    Me.RaiseDataMemberChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'CategoryName' value.
        ''' </summary>
        <DataMember(),
         Editable(False),
         StringLength(15)>
        Public Property CategoryName() As String
            Get
                Return Me._categoryName
            End Get
            Set
                If (String.Equals(Me._categoryName, Value) = False) Then
                    Me.OnCategoryNameChanging(Value)
                    Me.ValidateProperty("CategoryName", Value)
                    Me._categoryName = Value
                    Me.RaisePropertyChanged("CategoryName")
                    Me.OnCategoryNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'Discontinued' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property Discontinued() As Boolean
            Get
                Return Me._discontinued
            End Get
            Set
                If ((Me._discontinued = Value) _
                            = False) Then
                    Me.OnDiscontinuedChanging(Value)
                    Me.RaiseDataMemberChanging("Discontinued")
                    Me.ValidateProperty("Discontinued", Value)
                    Me._discontinued = Value
                    Me.RaiseDataMemberChanged("Discontinued")
                    Me.OnDiscontinuedChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets the collection of associated <see cref="Order_Detail"/> entity instances.
        ''' </summary>
        <Association("Product_Order_Detail", "ProductID", "ProductID")>
        Public ReadOnly Property Order_Details() As EntityCollection(Of Order_Detail)
            Get
                If (Me._order_Details Is Nothing) Then
                    Me._order_Details = New EntityCollection(Of Order_Detail)(Me, "Order_Details", AddressOf Me.FilterOrder_Details, AddressOf Me.AttachOrder_Details, AddressOf Me.DetachOrder_Details)
                End If
                Return Me._order_Details
            End Get
        End Property

        ''' <summary>
        ''' Gets or sets the 'ProductID' value.
        ''' </summary>
        <DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key(),
         RoundtripOriginal()>
        Public Property ProductID() As Integer
            Get
                Return Me._productID
            End Get
            Set
                If ((Me._productID = Value) _
                            = False) Then
                    Me.OnProductIDChanging(Value)
                    Me.ValidateProperty("ProductID", Value)
                    Me._productID = Value
                    Me.RaisePropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ProductName' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         Required(),
         RoundtripOriginal(),
         StringLength(40)>
        Public Property ProductName() As String
            Get
                Return Me._productName
            End Get
            Set
                If (String.Equals(Me._productName, Value) = False) Then
                    Me.OnProductNameChanging(Value)
                    Me.RaiseDataMemberChanging("ProductName")
                    Me.ValidateProperty("ProductName", Value)
                    Me._productName = Value
                    Me.RaiseDataMemberChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'QuantityPerUnit' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal(),
         StringLength(20)>
        Public Property QuantityPerUnit() As String
            Get
                Return Me._quantityPerUnit
            End Get
            Set
                If (String.Equals(Me._quantityPerUnit, Value) = False) Then
                    Me.OnQuantityPerUnitChanging(Value)
                    Me.RaiseDataMemberChanging("QuantityPerUnit")
                    Me.ValidateProperty("QuantityPerUnit", Value)
                    Me._quantityPerUnit = Value
                    Me.RaiseDataMemberChanged("QuantityPerUnit")
                    Me.OnQuantityPerUnitChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ReorderLevel' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property ReorderLevel() As Nullable(Of Short)
            Get
                Return Me._reorderLevel
            End Get
            Set
                If (Me._reorderLevel.Equals(Value) = False) Then
                    Me.OnReorderLevelChanging(Value)
                    Me.RaiseDataMemberChanging("ReorderLevel")
                    Me.ValidateProperty("ReorderLevel", Value)
                    Me._reorderLevel = Value
                    Me.RaiseDataMemberChanged("ReorderLevel")
                    Me.OnReorderLevelChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ResolveMethod' value.
        ''' </summary>
        <DataMember()>
        Public Property ResolveMethod() As String
            Get
                Return Me._resolveMethod
            End Get
            Set
                If (String.Equals(Me._resolveMethod, Value) = False) Then
                    Me.OnResolveMethodChanging(Value)
                    Me.RaiseDataMemberChanging("ResolveMethod")
                    Me.ValidateProperty("ResolveMethod", Value)
                    Me._resolveMethod = Value
                    Me.RaiseDataMemberChanged("ResolveMethod")
                    Me.OnResolveMethodChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'SupplierID' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property SupplierID() As Nullable(Of Integer)
            Get
                Return Me._supplierID
            End Get
            Set
                If (Me._supplierID.Equals(Value) = False) Then
                    Me.OnSupplierIDChanging(Value)
                    Me.RaiseDataMemberChanging("SupplierID")
                    Me.ValidateProperty("SupplierID", Value)
                    Me._supplierID = Value
                    Me.RaiseDataMemberChanged("SupplierID")
                    Me.OnSupplierIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'SupplierName' value.
        ''' </summary>
        <DataMember(),
         Editable(False)>
        Public Property SupplierName() As String
            Get
                Return Me._supplierName
            End Get
            Set
                If (String.Equals(Me._supplierName, Value) = False) Then
                    Me.OnSupplierNameChanging(Value)
                    Me.ValidateProperty("SupplierName", Value)
                    Me._supplierName = Value
                    Me.RaisePropertyChanged("SupplierName")
                    Me.OnSupplierNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'UnitPrice' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property UnitPrice() As Nullable(Of Decimal)
            Get
                Return Me._unitPrice
            End Get
            Set
                If (Me._unitPrice.Equals(Value) = False) Then
                    Me.OnUnitPriceChanging(Value)
                    Me.RaiseDataMemberChanging("UnitPrice")
                    Me.ValidateProperty("UnitPrice", Value)
                    Me._unitPrice = Value
                    Me.RaiseDataMemberChanged("UnitPrice")
                    Me.OnUnitPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'UnitsInStock' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property UnitsInStock() As Nullable(Of Short)
            Get
                Return Me._unitsInStock
            End Get
            Set
                If (Me._unitsInStock.Equals(Value) = False) Then
                    Me.OnUnitsInStockChanging(Value)
                    Me.RaiseDataMemberChanging("UnitsInStock")
                    Me.ValidateProperty("UnitsInStock", Value)
                    Me._unitsInStock = Value
                    Me.RaiseDataMemberChanged("UnitsInStock")
                    Me.OnUnitsInStockChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'UnitsOnOrder' value.
        ''' </summary>
        <ConcurrencyCheck(),
         DataMember(),
         RoundtripOriginal()>
        Public Property UnitsOnOrder() As Nullable(Of Short)
            Get
                Return Me._unitsOnOrder
            End Get
            Set
                If (Me._unitsOnOrder.Equals(Value) = False) Then
                    Me.OnUnitsOnOrderChanging(Value)
                    Me.RaiseDataMemberChanging("UnitsOnOrder")
                    Me.ValidateProperty("UnitsOnOrder", Value)
                    Me._unitsOnOrder = Value
                    Me.RaiseDataMemberChanged("UnitsOnOrder")
                    Me.OnUnitsOnOrderChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets a value indicating whether the 'DiscontinueProduct' action has been invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=False)>
        Public ReadOnly Property IsDiscontinueProductInvoked() As Boolean
            Get
                Return MyBase.IsActionInvoked("DiscontinueProduct")
            End Get
        End Property

        ''' <summary>
        ''' Gets a value indicating whether the 'DiscontinueProduct' method can be invoked on this entity.
        ''' </summary>
        <Display(AutoGenerateField:=False)>
        Public ReadOnly Property CanDiscontinueProduct() As Boolean
            Get
                Return MyBase.CanInvokeAction("DiscontinueProduct")
            End Get
        End Property

        Private Function FilterCategory(ByVal entity As Category) As Boolean
            Return Object.Equals(entity.CategoryID, Me.CategoryID)
        End Function

        Private Sub AttachOrder_Details(ByVal entity As Order_Detail)
            entity.Product = Me
        End Sub

        Private Sub DetachOrder_Details(ByVal entity As Order_Detail)
            entity.Product = Nothing
        End Sub

        Private Function FilterOrder_Details(ByVal entity As Order_Detail) As Boolean
            Return Object.Equals(entity.ProductID, Me.ProductID)
        End Function

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._productID
        End Function

        ''' <summary>
        ''' Invokes the 'DiscontinueProduct' action on this entity.
        ''' </summary>
        <EntityAction("DiscontinueProduct", AllowMultipleInvocations:=False)>
        Public Sub DiscontinueProduct()
            Me.OnDiscontinueProductInvoking()
            MyBase.InvokeAction("DiscontinueProduct")
            Me.OnDiscontinueProductInvoked()
        End Sub
    End Class

    ''' <summary>
    ''' The 'ProductInfo' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class ProductInfo
        Inherits Entity

        Private _categoryName As String

        Private _productID As Integer

        Private _productName As String

        Private _supplierName As String

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCategoryNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnCategoryNameChanged()
        End Sub
        Partial Private Sub OnProductIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
        Partial Private Sub OnSupplierNameChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnSupplierNameChanged()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="ProductInfo"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the 'CategoryName' value.
        ''' </summary>
        <DataMember(),
         Editable(False)>
        Public Property CategoryName() As String
            Get
                Return Me._categoryName
            End Get
            Set
                If (String.Equals(Me._categoryName, Value) = False) Then
                    Me.OnCategoryNameChanging(Value)
                    Me.ValidateProperty("CategoryName", Value)
                    Me._categoryName = Value
                    Me.RaisePropertyChanged("CategoryName")
                    Me.OnCategoryNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ProductID' value.
        ''' </summary>
        <DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key(),
         RoundtripOriginal()>
        Public Property ProductID() As Integer
            Get
                Return Me._productID
            End Get
            Set
                If ((Me._productID = Value) _
                            = False) Then
                    Me.OnProductIDChanging(Value)
                    Me.ValidateProperty("ProductID", Value)
                    Me._productID = Value
                    Me.RaisePropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'ProductName' value.
        ''' </summary>
        <DataMember()>
        Public Property ProductName() As String
            Get
                Return Me._productName
            End Get
            Set
                If (String.Equals(Me._productName, Value) = False) Then
                    Me.OnProductNameChanging(Value)
                    Me.RaiseDataMemberChanging("ProductName")
                    Me.ValidateProperty("ProductName", Value)
                    Me._productName = Value
                    Me.RaiseDataMemberChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'SupplierName' value.
        ''' </summary>
        <DataMember(),
         Editable(False)>
        Public Property SupplierName() As String
            Get
                Return Me._supplierName
            End Get
            Set
                If (String.Equals(Me._supplierName, Value) = False) Then
                    Me.OnSupplierNameChanging(Value)
                    Me.ValidateProperty("SupplierName", Value)
                    Me._supplierName = Value
                    Me.RaisePropertyChanged("SupplierName")
                    Me.OnSupplierNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._productID
        End Function
    End Class

    ''' <summary>
    ''' The 'Region' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class Region
        Inherits Entity

        Private _regionDescription As String

        Private _regionID As Integer

        Private _territories As EntityCollection(Of Territory)

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnRegionDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnRegionDescriptionChanged()
        End Sub
        Partial Private Sub OnRegionIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnRegionIDChanged()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Region"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the 'RegionDescription' value.
        ''' </summary>
        <DataMember(),
         StringLength(50)>
        Public Property RegionDescription() As String
            Get
                Return Me._regionDescription
            End Get
            Set
                If (String.Equals(Me._regionDescription, Value) = False) Then
                    Me.OnRegionDescriptionChanging(Value)
                    Me.RaiseDataMemberChanging("RegionDescription")
                    Me.ValidateProperty("RegionDescription", Value)
                    Me._regionDescription = Value
                    Me.RaiseDataMemberChanged("RegionDescription")
                    Me.OnRegionDescriptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'RegionID' value.
        ''' </summary>
        <DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key(),
         RoundtripOriginal()>
        Public Property RegionID() As Integer
            Get
                Return Me._regionID
            End Get
            Set
                If ((Me._regionID = Value) _
                            = False) Then
                    Me.OnRegionIDChanging(Value)
                    Me.ValidateProperty("RegionID", Value)
                    Me._regionID = Value
                    Me.RaisePropertyChanged("RegionID")
                    Me.OnRegionIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets the collection of associated <see cref="Territory"/> entity instances.
        ''' </summary>
        <Association("Region_Territory", "RegionID", "RegionID"),
         Composition()>
        Public ReadOnly Property Territories() As EntityCollection(Of Territory)
            Get
                If (Me._territories Is Nothing) Then
                    Me._territories = New EntityCollection(Of Territory)(Me, "Territories", AddressOf Me.FilterTerritories, AddressOf Me.AttachTerritories, AddressOf Me.DetachTerritories)
                End If
                Return Me._territories
            End Get
        End Property

        Private Sub AttachTerritories(ByVal entity As Territory)
            entity.Region = Me
        End Sub

        Private Sub DetachTerritories(ByVal entity As Territory)
            entity.Region = Nothing
        End Sub

        Private Function FilterTerritories(ByVal entity As Territory) As Boolean
            Return Object.Equals(entity.RegionID, Me.RegionID)
        End Function

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._regionID
        End Function
    End Class

    ''' <summary>
    ''' The 'Territory' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/DataTests.Northwind")>
    Partial Public NotInheritable Class Territory
        Inherits Entity

        Private _region As EntityRef(Of Region)

        Private _regionID As Integer

        Private _territoryDescription As String

        Private _territoryID As String

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnRegionIDChanging(ByVal value As Integer)
        End Sub
        Partial Private Sub OnRegionIDChanged()
        End Sub
        Partial Private Sub OnTerritoryDescriptionChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTerritoryDescriptionChanged()
        End Sub
        Partial Private Sub OnTerritoryIDChanging(ByVal value As String)
        End Sub
        Partial Private Sub OnTerritoryIDChanged()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Territory"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets or sets the associated <see cref="Region"/> entity.
        ''' </summary>
        <Association("Region_Territory", "RegionID", "RegionID", IsForeignKey:=True)>
        Public Property Region() As Region
            Get
                If (Me._region Is Nothing) Then
                    Me._region = New EntityRef(Of Region)(Me, "Region", AddressOf Me.FilterRegion)
                End If
                Return Me._region.Entity
            End Get
            Set
                Dim previous As Region = Me.Region
                If (Object.Equals(previous, Value) = False) Then
                    Me.ValidateProperty("Region", Value)
                    If (Not (previous) Is Nothing) Then
                        Me._region.Entity = Nothing
                        previous.Territories.Remove(Me)
                    End If
                    If (Not (Value) Is Nothing) Then
                        Me.RegionID = Value.RegionID
                    Else
                        Me.RegionID = CType(Nothing, Integer)
                    End If
                    Me._region.Entity = Value
                    If (Not (Value) Is Nothing) Then
                        Value.Territories.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Region")
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'RegionID' value.
        ''' </summary>
        <DataMember(),
         RoundtripOriginal()>
        Public Property RegionID() As Integer
            Get
                Return Me._regionID
            End Get
            Set
                If ((Me._regionID = Value) _
                            = False) Then
                    Me.OnRegionIDChanging(Value)
                    Me.RaiseDataMemberChanging("RegionID")
                    Me.ValidateProperty("RegionID", Value)
                    Me._regionID = Value
                    Me.RaiseDataMemberChanged("RegionID")
                    Me.OnRegionIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'TerritoryDescription' value.
        ''' </summary>
        <DataMember(),
         StringLength(50)>
        Public Property TerritoryDescription() As String
            Get
                Return Me._territoryDescription
            End Get
            Set
                If (String.Equals(Me._territoryDescription, Value) = False) Then
                    Me.OnTerritoryDescriptionChanging(Value)
                    Me.RaiseDataMemberChanging("TerritoryDescription")
                    Me.ValidateProperty("TerritoryDescription", Value)
                    Me._territoryDescription = Value
                    Me.RaiseDataMemberChanged("TerritoryDescription")
                    Me.OnTerritoryDescriptionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets the 'TerritoryID' value.
        ''' </summary>
        <DataMember(),
         Editable(False, AllowInitialValue:=True),
         Key(),
         Required(),
         RoundtripOriginal(),
         StringLength(20)>
        Public Property TerritoryID() As String
            Get
                Return Me._territoryID
            End Get
            Set
                If (String.Equals(Me._territoryID, Value) = False) Then
                    Me.OnTerritoryIDChanging(Value)
                    Me.ValidateProperty("TerritoryID", Value)
                    Me._territoryID = Value
                    Me.RaisePropertyChanged("TerritoryID")
                    Me.OnTerritoryIDChanged()
                End If
            End Set
        End Property

        Private Function FilterRegion(ByVal entity As Region) As Boolean
            Return Object.Equals(entity.RegionID, Me.RegionID)
        End Function

        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._territoryID
        End Function
    End Class
End Namespace

Namespace TestDomainServices.EFCore

    ''' <summary>
    ''' The DomainContext corresponding to the 'Northwind' DomainService.
    ''' </summary>
    Partial Public NotInheritable Class Northwind
        Inherits DomainContext

#Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Partial Private Sub OnCreated()
        End Sub

#End Region


        ''' <summary>
        ''' Initializes a new instance of the <see cref="Northwind"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New Uri("TestDomainServices-EFCore-Northwind.svc", UriKind.Relative))
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="Northwind"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The Northwind service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(DomainContext.CreateDomainClient(GetType(INorthwindContract), serviceUri, False))
        End Sub

        ''' <summary>
        ''' Initializes a new instance of the <see cref="Northwind"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated()
        End Sub

        ''' <summary>
        ''' Gets the set of <see cref="Category"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        ''' </summary>
        Public ReadOnly Property Categories() As EntitySet(Of Category)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Category)
            End Get
        End Property

        ''' <summary>
        ''' Gets the set of <see cref="Customer"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        ''' </summary>
        Public ReadOnly Property Customers() As EntitySet(Of Customer)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Customer)
            End Get
        End Property

        ''' <summary>
        ''' Gets the set of <see cref="Order_Detail"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        ''' </summary>
        Public ReadOnly Property Order_Details() As EntitySet(Of Order_Detail)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Order_Detail)
            End Get
        End Property

        ''' <summary>
        ''' Gets the set of <see cref="Order"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        ''' </summary>
        Public ReadOnly Property Orders() As EntitySet(Of Order)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Order)
            End Get
        End Property

        ''' <summary>
        ''' Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        ''' </summary>
        Public ReadOnly Property Products() As EntitySet(Of Product)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Product)
            End Get
        End Property

        ''' <summary>
        ''' Gets the set of <see cref="ProductInfo"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        ''' </summary>
        Public ReadOnly Property ProductInfos() As EntitySet(Of ProductInfo)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of ProductInfo)
            End Get
        End Property

        ''' <summary>
        ''' Gets the set of <see cref="Region"/> entity instances that have been loaded into this <see cref="Northwind"/> instance.
        ''' </summary>
        Public ReadOnly Property Regions() As EntitySet(Of Region)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Region)
            End Get
        End Property

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetCategories' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        Public Function GetCategoriesQuery() As EntityQuery(Of Category)
            Me.ValidateMethod("GetCategoriesQuery", Nothing)
            Return MyBase.CreateQuery(Of Category)("GetCategories", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entity instances using the 'GetCustomers' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entity instances.</returns>
        Public Function GetCustomersQuery() As EntityQuery(Of Customer)
            Me.ValidateMethod("GetCustomersQuery", Nothing)
            Return MyBase.CreateQuery(Of Customer)("GetCustomers", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Order_Detail"/> entity instances using the 'GetOrderDetails' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Order_Detail"/> entity instances.</returns>
        Public Function GetOrderDetailsQuery() As EntityQuery(Of Order_Detail)
            Me.ValidateMethod("GetOrderDetailsQuery", Nothing)
            Return MyBase.CreateQuery(Of Order_Detail)("GetOrderDetails", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Order"/> entity instances using the 'GetOrders' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Order"/> entity instances.</returns>
        Public Function GetOrdersQuery() As EntityQuery(Of Order)
            Me.ValidateMethod("GetOrdersQuery", Nothing)
            Return MyBase.CreateQuery(Of Order)("GetOrders", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductById' query.
        ''' </summary>
        ''' <param name="id">The value for the 'id' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        Public Function GetProductByIdQuery(ByVal id As Integer) As EntityQuery(Of Product)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("id", id)
            Me.ValidateMethod("GetProductByIdQuery", parameters)
            Return MyBase.CreateQuery(Of Product)("GetProductById", parameters, False, False)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="ProductInfo"/> entity instances using the 'GetProductInfos' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductInfo"/> entity instances.</returns>
        Public Function GetProductInfosQuery() As EntityQuery(Of ProductInfo)
            Me.ValidateMethod("GetProductInfosQuery", Nothing)
            Return MyBase.CreateQuery(Of ProductInfo)("GetProductInfos", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        Public Function GetProductsQuery() As EntityQuery(Of Product)
            Me.ValidateMethod("GetProductsQuery", Nothing)
            Return MyBase.CreateQuery(Of Product)("GetProducts", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegionById' query.
        ''' </summary>
        ''' <param name="id">The value for the 'id' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        Public Function GetRegionByIdQuery(ByVal id As Integer) As EntityQuery(Of Region)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("id", id)
            Me.ValidateMethod("GetRegionByIdQuery", parameters)
            Return MyBase.CreateQuery(Of Region)("GetRegionById", parameters, False, False)
        End Function

        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Region"/> entity instances using the 'GetRegions' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entity instances.</returns>
        Public Function GetRegionsQuery() As EntityQuery(Of Region)
            Me.ValidateMethod("GetRegionsQuery", Nothing)
            Return MyBase.CreateQuery(Of Region)("GetRegions", Nothing, False, True)
        End Function

        ''' <summary>
        ''' Invokes the 'DiscontinueProduct' method of the specified <see cref="Product"/> entity.
        ''' </summary>
        ''' <param name="product">The <see cref="Product"/> entity instance.</param>
        Public Sub DiscontinueProduct(ByVal product As Product)
            product.DiscontinueProduct
        End Sub

        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New NorthwindEntityContainer()
        End Function

        ''' <summary>
        ''' Service contract for the 'Northwind' DomainService.
        ''' </summary>
        <ServiceContract()>
        Public Interface INorthwindContract

            ''' <summary>
            ''' Asynchronously invokes the 'GetCategories' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetCategories", ReplyAction:="http://tempuri.org/Northwind/GetCategoriesResponse")>
            Function BeginGetCategories(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCategories'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            Function EndGetCategories(ByVal result As IAsyncResult) As QueryResult(Of Category)

            ''' <summary>
            ''' Asynchronously invokes the 'GetCustomers' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetCustomers", ReplyAction:="http://tempuri.org/Northwind/GetCustomersResponse")>
            Function BeginGetCustomers(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCustomers'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
            Function EndGetCustomers(ByVal result As IAsyncResult) As QueryResult(Of Customer)

            ''' <summary>
            ''' Asynchronously invokes the 'GetOrderDetails' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetOrderDetails", ReplyAction:="http://tempuri.org/Northwind/GetOrderDetailsResponse")>
            Function BeginGetOrderDetails(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetOrderDetails'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetOrderDetails'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetOrderDetails' operation.</returns>
            Function EndGetOrderDetails(ByVal result As IAsyncResult) As QueryResult(Of Order_Detail)

            ''' <summary>
            ''' Asynchronously invokes the 'GetOrders' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetOrders", ReplyAction:="http://tempuri.org/Northwind/GetOrdersResponse")>
            Function BeginGetOrders(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetOrders'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetOrders'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetOrders' operation.</returns>
            Function EndGetOrders(ByVal result As IAsyncResult) As QueryResult(Of Order)

            ''' <summary>
            ''' Asynchronously invokes the 'GetProductById' operation.
            ''' </summary>
            ''' <param name="id">The value for the 'id' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetProductById", ReplyAction:="http://tempuri.org/Northwind/GetProductByIdResponse")>
            Function BeginGetProductById(ByVal id As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetProductById'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetProductById'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetProductById' operation.</returns>
            Function EndGetProductById(ByVal result As IAsyncResult) As QueryResult(Of Product)

            ''' <summary>
            ''' Asynchronously invokes the 'GetProductInfos' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetProductInfos", ReplyAction:="http://tempuri.org/Northwind/GetProductInfosResponse")>
            Function BeginGetProductInfos(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetProductInfos'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetProductInfos'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetProductInfos' operation.</returns>
            Function EndGetProductInfos(ByVal result As IAsyncResult) As QueryResult(Of ProductInfo)

            ''' <summary>
            ''' Asynchronously invokes the 'GetProducts' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetProducts", ReplyAction:="http://tempuri.org/Northwind/GetProductsResponse")>
            Function BeginGetProducts(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetProducts'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            Function EndGetProducts(ByVal result As IAsyncResult) As QueryResult(Of Product)

            ''' <summary>
            ''' Asynchronously invokes the 'GetRegionById' operation.
            ''' </summary>
            ''' <param name="id">The value for the 'id' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetRegionById", ReplyAction:="http://tempuri.org/Northwind/GetRegionByIdResponse")>
            Function BeginGetRegionById(ByVal id As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetRegionById'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetRegionById'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetRegionById' operation.</returns>
            Function EndGetRegionById(ByVal result As IAsyncResult) As QueryResult(Of Region)

            ''' <summary>
            ''' Asynchronously invokes the 'GetRegions' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <HasSideEffects(False),
             OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/GetRegions", ReplyAction:="http://tempuri.org/Northwind/GetRegionsResponse")>
            Function BeginGetRegions(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetRegions'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetRegions'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetRegions' operation.</returns>
            Function EndGetRegions(ByVal result As IAsyncResult) As QueryResult(Of Region)

            ''' <summary>
            ''' Asynchronously invokes the 'SubmitChanges' operation.
            ''' </summary>
            ''' <param name="changeSet">The change-set to submit.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <OperationContract(AsyncPattern:=True, Action:="http://tempuri.org/Northwind/SubmitChanges", ReplyAction:="http://tempuri.org/Northwind/SubmitChangesResponse")>
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult

            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            ''' <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface

        Friend NotInheritable Class NorthwindEntityContainer
            Inherits EntityContainer

            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of Category)(EntitySetOperations.All)
                Me.CreateEntitySet(Of Customer)(EntitySetOperations.All)
                Me.CreateEntitySet(Of Order)(EntitySetOperations.All)
                Me.CreateEntitySet(Of Order_Detail)(EntitySetOperations.All)
                Me.CreateEntitySet(Of Product)(EntitySetOperations.All)
                Me.CreateEntitySet(Of ProductInfo)(EntitySetOperations.Edit)
                Me.CreateEntitySet(Of Region)(EntitySetOperations.All)
                Me.CreateEntitySet(Of Territory)(EntitySetOperations.All)
            End Sub
        End Class
    End Class
End Namespace
